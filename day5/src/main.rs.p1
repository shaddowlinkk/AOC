    use std::io::BufReader;
    use std::io::BufRead;
    use std::fs::File;
    fn rulecheck(data: &Vec<i32>, rules: &Vec<Vec<i32>>) -> bool{
	for rule in rules{
		if !data.iter().any(|&r| r== rule[0]){
			continue
		}
		match data.iter().position(|&r| r == rule[1]){
		Some(x)=>{
			let mut found=false;
			for num in &data[0..x] {
				if *num == rule[0]{
					found=true
				}
			}
			if !found {
			//	println!("{:?},{:?}",rule,data);	
				return false;
			}
		},
		None => continue
		}
	}
	return true;
    }
    fn main() {   
        let f = File::open("rules.txt").unwrap();
        let f2 = File::open("input.txt").unwrap();
        let file = BufReader::new(&f);
        let file2 = BufReader::new(&f2);
	let rules= file.lines().map(|a| a.unwrap().split("|").map(|a| a.parse::<i32>().unwrap()).collect::<Vec<i32>>()).collect::<Vec<Vec<i32>>>();
	let data = file2.lines().map(|a| a.unwrap().split(",").map(|a| a.parse::<i32>().unwrap()).collect::<Vec<i32>>()).collect::<Vec<Vec<i32>>>();
	let out = data.into_iter().filter(|a| rulecheck(a,&rules)).fold(0,|acc ,da| da[da.len()/2]+acc);
	println!("data:{:?}",out)
    }

        
